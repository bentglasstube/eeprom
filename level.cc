#include "level.h"

Level::Level() : player(), map_() {
  map_.set_size(12, 14);
}

void Level::load(int level) {
  pistons_.clear();
  crates_.clear();

  switch (level) {
    case 1:
      populate({
          84,98,98,99,13,97,98,98,98,98,98,85,
          91,3,1,1,33,1,1,1,3,3,3,89,
          91,3,3,1,33,1,1,1,1,1,1,89,
          91,3,3,1,33,1,1,1,1,1,1,97,
          91,1,1,9,33,17,17,17,17,17,17,17,
          91,1,1,1,33,1,1,1,1,1,1,81,
          91,1,1,1,33,1,1,2,2,1,1,89,
          91,1,1,1,33,1,1,2,2,1,1,89,
          91,1,1,1,33,1,1,1,1,1,1,89,
          91,1,1,1,33,1,1,81,82,82,82,93,
          91,86,87,87,87,87,88,89,90,90,90,90,
          91,94,95,95,95,95,96,89,90,90,90,90,
          91,102,103,103,103,103,104,89,90,90,90,90,
          92,82,82,82,82,82,82,93,90,90,90,90
          });

      player.set_position(4, 1, Player::Facing::S);
      pistons_.emplace_back(3, 4, Piston::Facing::E, 4);

      break;

    case 2:
      populate({
          84,98,98,98,98,98,98,98,98,98,98,85,
          91,3,3,86,87,87,88,3,3,3,3,89,
          91,3,1,94,95,95,96,1,1,3,3,89,
          99,1,1,102,103,103,104,11,1,3,3,97,
          15,17,17,17,17,17,17,1,1,1,1,1,
          83,1,1,12,12,1,12,33,1,1,1,81,
          91,1,1,1,1,1,1,33,1,1,3,89,
          91,1,3,1,1,3,1,33,1,3,3,89,
          91,1,3,3,3,1,1,33,1,3,1,89,
          91,1,1,3,3,1,1,33,1,1,1,89,
          91,86,87,87,87,87,87,87,87,87,88,89,
          91,94,95,95,95,95,95,95,95,95,96,89,
          91,102,103,103,103,103,103,103,103,103,104,89,
          92,82,82,82,82,82,82,82,82,82,82,93
          });

      player.set_position(1, 4, Player::Facing::E);
      pistons_.emplace_back(3, 5, Piston::Facing::N, 4, 4);
      pistons_.emplace_back(4, 5, Piston::Facing::N, 4, 3);
      pistons_.emplace_back(6, 5, Piston::Facing::N, 4, 2);
      pistons_.emplace_back(7, 3, Piston::Facing::S, 4, 1);

      break;

    case 3:
      populate({
          84,98,98,98,98,98,98,99,13,97,98,85,
          91,1,1,3,1,3,1,1,1,1,1,89,
          91,1,3,3,3,1,1,1,1,3,1,89,
          99,1,1,1,1,1,1,2,1,3,1,89,
          15,18,18,18,1,1,1,1,3,1,3,89,
          83,1,1,1,1,2,1,1,3,3,1,89,
          91,1,1,1,1,1,1,1,3,1,1,89,
          91,1,1,1,1,1,34,1,1,1,1,89,
          91,3,3,3,1,1,34,1,1,1,1,89,
          91,3,3,3,1,1,34,1,1,1,1,89,
          91,3,1,1,1,1,34,1,1,1,1,89,
          91,3,1,3,3,1,34,1,1,1,3,89,
          91,3,3,3,3,1,34,1,1,1,1,89,
          92,82,82,82,82,83,1,81,82,82,82,93
          });

      player.set_position(1, 4, Player::Facing::E);

      break;

    case 4:
      populate({
          84,98,98,98,98,99,13,97,98,98,98,85,
          91,1,3,1,1,1,33,1,1,1,1,89,
          91,1,3,1,1,1,33,1,1,1,1,89,
          91,1,1,1,1,1,33,1,1,1,1,89,
          91,1,1,1,1,1,33,1,1,1,1,89,
          91,1,1,1,1,1,1,1,1,1,1,89,
          91,2,2,2,1,1,2,1,1,2,2,89,
          91,3,3,3,1,1,1,1,1,3,3,89,
          91,3,3,3,1,1,1,1,1,3,3,89,
          91,3,3,3,1,1,34,1,1,3,3,89,
          91,3,3,3,1,1,34,1,1,3,3,89,
          91,3,3,3,1,1,34,1,1,3,3,89,
          91,3,3,3,1,1,34,1,1,3,3,89,
          92,82,82,82,82,83,34,81,82,82,82,93
          });

      player.set_position(6, 1, Player::Facing::S);

      break;

    case 5:
      populate({
          90,90,90,90,90,91,13,97,98,98,98,85,
          90,90,90,90,90,91,33,1,3,3,1,89,
          90,90,90,90,90,91,33,1,1,3,3,89,
          98,98,98,98,98,99,33,1,1,1,1,89,
          87,87,87,87,87,87,87,88,34,1,1,89,
          95,95,95,95,95,95,95,96,34,1,1,89,
          103,103,103,103,103,103,103,104,34,1,1,89,
          83,1,1,1,1,1,1,1,1,1,1,97,
          91,86,87,87,87,88,1,12,1,1,1,16,
          91,94,95,95,95,96,34,1,1,3,3,81,
          91,94,95,95,95,96,34,1,1,3,3,89,
          91,94,95,95,95,96,34,1,1,1,1,89,
          91,102,103,103,103,104,1,10,1,1,1,89,
          92,82,82,82,82,83,1,81,82,82,82,93
          });

      player.set_position(6, 1, Player::Facing::S);
      pistons_.emplace_back(7, 8, Piston::Facing::N, 4);
      pistons_.emplace_back(7, 12, Piston::Facing::W, 4, 2);

      break;

    case 6:
      populate({
          84,98,98,98,98,99,13,97,98,98,98,85,
          91,1,3,3,1,1,1,1,1,1,1,89,
          91,86,87,87,87,88,1,86,87,88,1,89,
          91,94,95,95,95,96,1,94,95,96,1,89,
          91,94,95,95,95,96,1,94,95,96,1,89,
          91,94,95,95,95,96,3,94,95,96,1,89,
          99,102,103,103,103,104,1,102,103,104,1,89,
          1,1,1,1,1,1,1,1,1,3,1,97,
          83,1,86,87,87,87,87,87,87,88,1,16,
          91,3,94,95,95,95,95,95,95,96,1,81,
          91,3,94,95,95,95,95,95,95,96,1,89,
          91,1,102,103,103,103,103,103,103,104,1,89,
          91,1,1,1,1,1,1,1,3,3,3,89,
          92,82,82,82,82,83,14,81,82,82,82,93
          });

      player.set_position(6, 1, Player::Facing::S);

      break;

    case 7:
      populate({
          90,90,90,90,90,90,84,98,98,98,98,85,
          90,90,90,90,90,90,91,1,1,11,33,89,
          90,90,90,90,90,90,91,9,3,3,33,89,
          90,90,90,90,90,90,91,1,9,3,33,89,
          90,90,90,90,90,90,92,82,82,83,33,89,
          84,98,98,98,98,98,98,98,98,99,1,89,
          99,1,3,1,1,1,1,1,3,1,1,97,
          1,1,3,1,1,1,1,3,1,1,1,16,
          83,1,3,1,1,1,1,1,3,1,1,81,
          92,82,82,82,82,82,82,82,82,82,82,93,
          90,90,90,90,90,90,90,90,90,90,90,90,
          90,90,90,90,90,90,90,90,90,90,90,90,
          90,90,90,90,90,90,90,90,90,90,90,90,
          90,90,90,90,90,90,90,90,90,90,90,90
          });

      player.set_position(10, 7, Player::Facing::W);
      pistons_.emplace_back(9, 1, Piston::Facing::S, 4, 2);
      pistons_.emplace_back(8, 3, Piston::Facing::E, 4, 1);
      pistons_.emplace_back(7, 2, Piston::Facing::E, 4, 3);

      break;

    case 8:
      populate({
          84,98,98,98,98,98,98,98,98,98,98,85,
          91,86,87,87,87,87,87,87,87,87,88,89,
          91,94,81,82,83,95,95,81,82,83,96,89,
          91,94,89,90,91,95,95,89,90,91,96,89,
          91,94,97,98,99,95,95,97,98,99,96,89,
          91,102,103,103,103,103,103,103,103,103,104,89,
          99,11,11,11,11,11,11,11,11,11,2,97,
          1,1,1,1,1,1,1,1,1,1,1,16,
          83,86,87,87,87,87,87,87,87,87,88,81,
          91,94,81,82,83,95,95,81,82,83,96,89,
          91,94,89,90,91,95,95,89,90,91,96,89,
          91,94,97,98,99,95,95,97,98,99,96,89,
          91,102,103,103,103,103,103,103,103,103,104,89,
          92,82,82,82,82,82,82,82,82,82,82,93
          });

      player.set_position(10, 7, Player::Facing::W);

      pistons_.emplace_back(1, 6, Piston::Facing::S, 5, 3);
      pistons_.emplace_back(2, 6, Piston::Facing::S, 5, 4);
      pistons_.emplace_back(3, 6, Piston::Facing::S, 5, 3);
      pistons_.emplace_back(4, 6, Piston::Facing::S, 5, 3);
      pistons_.emplace_back(5, 6, Piston::Facing::S, 5, 2);
      pistons_.emplace_back(6, 6, Piston::Facing::S, 5, 2);
      pistons_.emplace_back(7, 6, Piston::Facing::S, 5, 1);
      pistons_.emplace_back(8, 6, Piston::Facing::S, 5, 1);
      pistons_.emplace_back(9, 6, Piston::Facing::S, 5, 3);

      break;

    case 9:
      populate({
          84,98,98,98,98,98,98,98,98,98,98,85,
          91,33,25,25,25,17,17,17,86,87,88,89,
          91,33,41,17,33,41,17,17,94,95,96,89,
          91,33,41,25,33,41,41,17,102,103,104,89,
          91,33,41,17,33,41,41,41,25,41,41,89,
          91,33,41,25,33,41,41,17,41,41,41,89,
          91,33,41,25,25,25,41,33,41,33,33,97,
          91,33,33,33,17,17,41,33,25,25,25,16,
          91,33,33,33,17,33,25,25,86,87,88,81,
          91,33,33,33,17,25,41,25,94,95,96,89,
          91,86,87,88,25,25,25,25,94,95,96,89,
          91,94,95,96,17,17,17,17,94,95,96,89,
          91,102,103,104,25,25,25,25,102,103,104,89,
          92,82,82,82,83,1,81,82,82,82,82,93
          });

      player.set_position(10, 7, Player::Facing::W);

      break;

    case 10:
      populate({
          84,98,98,98,99,13,97,98,98,98,85,90,
          91,1,1,1,2,1,2,1,1,1,89,90,
          91,1,2,1,2,1,2,1,2,1,89,90,
          91,1,3,1,1,3,1,3,1,1,97,85,
          92,83,1,2,2,1,2,1,2,2,2,89,
          90,91,1,1,1,1,2,1,1,1,1,89,
          84,99,2,2,2,2,2,1,2,2,1,89,
          91,1,1,1,1,1,1,3,1,1,1,89,
          91,1,81,82,83,1,1,81,82,83,1,89,
          91,3,89,90,91,3,1,89,90,91,1,89,
          91,1,89,90,91,1,2,89,90,91,1,89,
          91,1,97,98,99,1,1,97,98,99,1,89,
          91,1,1,1,1,1,1,3,1,3,1,89,
          92,82,82,82,83,1,81,82,82,82,82,93
          });

      player.set_position(5, 1, Player::Facing::S);

      break;
  }
}

void Level::update(unsigned int elapsed) {
  map_.update(elapsed);
  player.update(elapsed);

  for (auto& p : pistons_) {
    p.update(elapsed);
  }

  for (auto& c : crates_) {
    c.update(elapsed);
  }
}

void Level::draw(Graphics& graphics) const {
  map_.draw(graphics);
  player.draw(graphics);

  for (const auto& p : pistons_) {
    p.draw(graphics);
  }

  for (const auto& c : crates_) {
    c.draw(graphics);
  }
}

Map::Tile Level::player_tile() const {
  const int px = player.map_x();
  const int py = player.map_y();

  return  map_.tile(px, py);
}

void Level::conveyors() {
  if (player.moving()) return;

  const auto tile = player_tile();
  if (tile.conveyor()) {
    player.convey(tile.dx(), tile.dy(), map_);
  }
}

bool Level::step_pistons(Audio& audio) {
  for (auto& p : pistons_) {
    if (p.step()) {
      audio.play_sample("slide.wav");
      // TODO see if something was pushed
      const auto from = p.push_from();
      const auto to = p.push_to();
      push_player(from, to);
    }
  }

  return false;
}

bool Level::push_player(std::pair<int, int> from, std::pair<int, int> to) {
  if (player.map_x() == from.first && player.map_y() == from.second) {
    player.push(to.first, to.second, map_);
    return true;
  } else {
    return false;
  }
}

bool Level::push_crate(int x, int y, int tx, int ty) {
  for (auto &c : crates_) {
    if (c.map_x() == x && c.map_y() == y) {
      c.push(tx, ty);
      // TODO check if map is solid
      return true;
    }
  }
  return false;
}

bool Level::player_oob() const {
  if (player.map_x() < 0) return true;
  if (player.map_x() >= map_.width()) return true;
  if (player.map_y() < 0) return true;
  if (player.map_y() >= map_.height()) return true;

  return false;
}

void Level::populate(std::vector<int> tiles) {
  int x = 0, y = 0;

  for (auto t : tiles) {
    map_.set_tile(x, y, Map::tile_from_sprite(t));

    if (t == 3) crates_.emplace_back(x * 16, y * 16);

    if (++x >= map_.width()) {
      x = 0;
      ++y;
    }
    if (y >= map_.height()) return;
  }
}

void Level::run_program() {
  player.execute(map_);
}
